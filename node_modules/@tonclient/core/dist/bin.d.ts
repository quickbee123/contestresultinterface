import { ClientConfig } from "./modules";
export declare type ResponseHandler = (params: any, responseType: number) => void;
export interface BinaryLibrary {
    setResponseHandler(handler?: (requestId: number, paramsJson: string, responseType: number, finished: boolean) => void): void;
    createContext(configJson: string): Promise<string>;
    destroyContext(context: number): void;
    sendRequest(context: number, requestId: number, functionName: string, functionParamsJson: string): void;
}
export declare enum ResponseType {
    Success = 0,
    Error = 1,
    Nop = 2,
    AppRequest = 3,
    AppNotify = 4,
    Custom = 100
}
export declare function useLibrary(loader: () => Promise<BinaryLibrary>): void;
export declare function createContext(config: ClientConfig): Promise<number>;
export declare function destroyContext(context: number): void;
export declare function request<P, R>(context: number, functionName: string, functionParams: P, responseHandler?: ResponseHandler): Promise<R>;
//# sourceMappingURL=bin.d.ts.map