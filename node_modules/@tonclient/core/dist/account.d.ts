import { ParamsOfEncodeMessage, ResultOfProcessMessage, ResultOfRunExecutor, Signer, AbiContract } from "./modules";
import { TonClient } from "./client";
/**
 * Options for an account instance
 */
export declare type AccountOptions = {
    /**
     * Initial data
     */
    initData?: object;
    /**
     * Default is `signerNone`
     */
    signer?: Signer;
    /**
     * If not specified will be calculated on contracts init state.
     */
    address?: string;
    /**
     * If not specified the Account.getDefaultClient() will be used.
     */
    client?: TonClient;
};
/**
 * Run options
 */
export declare type AccountRunOptions = {
    /**
     * Is not specified then this.signer
     */
    signer?: Signer;
};
/**
 * Run Local options
 */
export declare type AccountRunLocalOptions = {
    /**
     * If `true` then performs all checks and calculations as node do.
     * If `false` then simplified execution is used.
     */
    performAllChecks?: boolean;
};
/**
 * Object that can be used to send some value before
 * deploying account.
 */
export declare type AccountGiver = (address: string, value: number) => Promise<void>;
/**
 * Deploy options
 */
export declare type AccountDeployOptions = {
    /**
     * Function name that will be run on deploy. Special values:
     * - `undefined` (omitted): library will use `constructor` as a function name.
     * - `null`: library will not produce message body (no init function invocation).
     */
    initFunctionName?: string | null;
    /**
     * Parameters of init function.
     * Note: library ignores this parameter if `initFunctionName` is `null`.
     */
    initInput?: object;
    /**
     * Giver to be used to send amount of value to deploying address
     * before deploying.
     *
     * If `true` then Account.getDefaultGiver() will be used.
     * If omitted then application must prepay address
     * using own logic.
     */
    useGiver?: true | AccountGiver;
};
/**
 * Smart Contract
 *
 * This object contains information about smart contract class.
 */
export declare type Contract = {
    /**
     * ABI of smart contract
     */
    abi: AbiContract;
    /**
     * Compiled artifact of the smart contract.
     * This field contains BOC with code and initial data (init state).
     * If it is missing, then application can't deploy account of this contracts.
     */
    tvc?: string;
};
export declare class AccountError extends Error {
    static missingTVC(): AccountError;
}
export declare class Account {
    private contract;
    private static _giver;
    static set giver(giver: AccountGiver);
    private static createGiver;
    static get giver(): AccountGiver;
    private readonly client;
    private readonly abi;
    private readonly initData;
    private readonly signer;
    private syncLastTransLt;
    private address;
    private cachedBoc;
    constructor(contract: Contract, options?: AccountOptions);
    getAddress(): Promise<string>;
    getParamsOfDeployMessage(options?: AccountDeployOptions): ParamsOfEncodeMessage;
    /**
     * Deploys account into network
     * @param options
     */
    deploy(options?: AccountDeployOptions): Promise<ResultOfProcessMessage>;
    /**
     * Process message on network and returns detailed information
     * about results including produced transaction and messages.
     * @param functionName
     * @param input
     * @param options
     */
    run(functionName: string, input: object, options?: AccountRunOptions): Promise<ResultOfProcessMessage>;
    /**
     * Evaluates message on local TVM and returns decoded output
     * @param functionName
     * @param input
     * @param options
     */
    runLocal(functionName: string, input: object, options?: AccountRunLocalOptions): Promise<ResultOfRunExecutor>;
    private needSyncWithTransaction;
    /**
     * Returns raw data of the account in form of BOC.
     */
    boc(): Promise<string>;
    /**
     * Drops all cached and local data.
     */
    refresh(): void;
    /**
     * Returns parsed data of the account.
     */
    getAccount(): Promise<any>;
    /**
     * Free all internal resources related to this instance
     * and allocated inside core.
     *
     * It is a good practice to call this method when you have finished
     * with this Account object.
     *
     * Note that this instance still fully operable.
     * So you can continue to work with this instance.
     */
    free(): Promise<void>;
}
//# sourceMappingURL=account.d.ts.map